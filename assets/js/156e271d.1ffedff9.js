"use strict";(self.webpackChunkessif_lab=self.webpackChunkessif_lab||[]).push([[6040],{9420:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>h});var o=s(7624),r=s(2172);const i={id:"scope",displayed_sidebar:"essifLabSideBar",termType:"concept",term:"scope",formPhrases:["scope{ss}"],status:"draft",grouptags:null,hoverText:"Scope: the extent of the area or subject matter (which we use, e.g., to define Patterns, Concepts, Terms and Glossaries in, but it serves other purposes as well).",glossaryTerm:"Scope",glossaryText:"the extent of the area or subject matter (which we use, e.g., to define [pattern](@), [concept](@), [term](@) and [glossaries](@) in, but it serves other purposes as well).",date:20210601},n="Scope",a={id:"terms/scope",title:"Scope",description:"Short Description",source:"@site/docs/terms/scope.md",sourceDirName:"terms",slug:"/terms/scope",permalink:"/framework/docs/terms/scope",draft:!1,unlisted:!1,editUrl:"https://github.com/essif-lab/framework/blob/master/docs/terms/scope.md",tags:[],version:"current",lastUpdatedBy:"Ca5e",lastUpdatedAt:1706094108,formattedLastUpdatedAt:"Jan 24, 2024",frontMatter:{id:"scope",displayed_sidebar:"essifLabSideBar",termType:"concept",term:"scope",formPhrases:["scope{ss}"],status:"draft",grouptags:null,hoverText:"Scope: the extent of the area or subject matter (which we use, e.g., to define Patterns, Concepts, Terms and Glossaries in, but it serves other purposes as well).",glossaryTerm:"Scope",glossaryText:"the extent of the area or subject matter (which we use, e.g., to define [pattern](@), [concept](@), [term](@) and [glossaries](@) in, but it serves other purposes as well).",date:20210601},sidebar:"essifLabSideBar"},c={},h=[{value:"Short Description",id:"short-description",level:3},{value:"Purpose",id:"purpose",level:3},{value:"Criteria",id:"criteria",level:3},{value:"Notes",id:"notes",level:3}];function d(e){const t={a:"a",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"scope",children:"Scope"}),"\n",(0,o.jsx)(t.h3,{id:"short-description",children:"Short Description"}),"\n",(0,o.jsxs)(t.p,{children:["A ",(0,o.jsx)(t.strong,{children:"scope"})," (in the eSSIFLab context) is the extent of the area or subject matter (as in ",(0,o.jsx)(t.a,{href:"https://www.lexico.com/definition/scope",children:"OED"}),". We use it, e.g., to define patterns, concepts, terms and glossaries in, but a scope may serve other (additional) purposes. Scopes may overlap, or be nested. It is comparable to ",(0,o.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Namespace",children:"Namespaces"}),", were it not that entities other than names (signs that are used to identify/refer to objects of various kinds) can reside in a scope as it is defined here."]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)("a",{href:"/framework/docs/terms/terminology",hovertext:"Terminology (in/of a Scope): the set of terms that are used within a single Scope to refer to a single Definition, enabling Parties to reason and communicate ideas they have about one or more specific topics.",children:"terminology pattern"})," provides an overview of how this concept fits in with related concepts."]}),"\n",(0,o.jsx)(t.h3,{id:"purpose",children:"Purpose"}),"\n",(0,o.jsxs)(t.p,{children:["This allows each ",(0,o.jsx)("a",{href:"/framework/docs/terms/term",hovertext:"Term: a word or phrase (i.e.: text) that is used in at least one Scope/context to represent a specific Concept.",children:"term"})," (words, phrases) to be used in a limited scope, for specific purposes. The fact that terms are 'scoped' implies that a term may have ",(0,o.jsx)(t.em,{children:"different"})," meanings, depending on the scope within which it is used. Also, it allows us to author documentation in a 'scoped' fashion, allowing different groups of people to author, use and disseminate their documentation (including documentation about their ideas (",(0,o.jsx)("a",{href:"/framework/docs/terms/pattern",hovertext:"Pattern (also: Mental Model): A description, both casual and formal, of a set of Concepts (ideas), relations between them, and constraints, that together form a coherent and consistent 'viewpoint', or 'way of thinking' about a certain topic.",children:"patterns"}),"), ",(0,o.jsx)("a",{href:"/framework/docs/terms/concept",hovertext:"Concept: the ideas/thoughts behind a classification of Entities (what makes Entities in that class 'the same').",children:"concepts"}),", and ",(0,o.jsx)("a",{href:"/framework/docs/terms/term",hovertext:"Term: a word or phrase (i.e.: text) that is used in at least one Scope/context to represent a specific Concept.",children:"terms"}),".)"]}),"\n",(0,o.jsx)(t.h3,{id:"criteria",children:"Criteria"}),"\n",(0,o.jsx)(t.p,{children:"a (virtual) demarcation that serves particular purposes."}),"\n",(0,o.jsx)(t.h3,{id:"notes",children:"Notes"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Scopes within which a certain ",(0,o.jsx)("a",{href:"/framework/docs/terms/concept",hovertext:"Concept: the ideas/thoughts behind a classification of Entities (what makes Entities in that class 'the same').",children:"concept"})," is known, may still use different terms to refer to the concept. That's the reason for having ",(0,o.jsx)("a",{href:"/framework/docs/terms/definition",hovertext:"Definition: a text that helps Parties to have the same understanding about the meaning of (and Concept behind) a Term, ideally in such a way that these Parties can determine whether or not they make the same distinction.",children:"definitions"})," that specify criteria for determining whether or not something qualifies as (an instance of) some concept: we cannot rely on different scopes necessarily using the same terms for that."]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,r.M)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},2172:(e,t,s)=>{s.d(t,{I:()=>a,M:()=>n});var o=s(1504);const r={},i=o.createContext(r);function n(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:n(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);