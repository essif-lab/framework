// Purposes:
// - replace %-marked words with %%-syntax for those words.
// - replace varieties of specific eSSIF-Lab phrases (e.g. plurals, word combinations) with the appropriate `reftext` references

// If the documentation generation doesn't check syntax, you use designated regexes for the following kinds of errors:
// 1a. Errors with %-signs:  `(?<!_%)(?<!%)(?<!\d)%(?!(%|\d))`
// 1b. Errors with %-signs:  `(?<!%)(%?)%[A-Za-z](\1)[^%]*?$`
// 2. Errors in hoverTexts: `^hoverText[^%]*%` (you cannot use %-stuff in hoverTexts)
// 3. Errors in glossaryTexts: `^glossaryText.*?%%[^%]*?\|` (%-stuff in glossaryTexts have a ^, not a |)

// This is a script that can be run by the Batch Replacer extension of VSCode.
// You DO need to install the 'case conversion hack' files,
// which you can find at https://github.com/angelo-mollame/batch-replacer/issues/11.
// Press Ctrl-Shift-P as you are editing this script, then search for `Batch Replacer`, and execute it.
// Please note that if there are many files, execution may take some time...

// Executing the script will do the following replacements consecutively:
// 1. `%text that may include spaces%` --> `%%text that may include spaces%%`
// 2. `%text-without-spaces` --> `%%text-without-spaces%%` (some (limited) punctuation around it is allowed)
// 3. `%%Show Text%%` --> `%%Show Text|show-text%%` (we use the 'case-conversion hack' to make the reftext lowercase)
// 4. `|ref-text%% is being checked to see if modifications need to be made (e.g. plurals to singular etc.)
// 5. There is a cleanup phase that removes any %%...|...%% syntax from markdown headers, and <img /> constructs.
//    I have not found regexes that work in this script to clean up yaml front matter (docusaurs headers)

// Complex regular expressions can be created using variables. Variables are applied to the entire script, and should be defined at the beginning of the script. Variables are defined as ... = "..." and are used as %{...}. Variables can only be used in the replace and replace-regex instructions.
// variables can reference themselves and be overwritten - see documentation of 'batch replacer' extension

beg = "(?<=\W%%)"
mid = "(?<=\|)"
end = "(?=%%\W)"
ss = "(?:['’]?s|\(s\))?"
yies = "(y|y['’]s|ies)"

dutyright = "(?:dut(?:y|ies)|rights?)"
dutyright = "%{dutyright}(?:-*(?:/|and|or|and/or)-*%{dutyright})?"
dutyrighttype = "%{dutyright}-types?"

// If you do not specify the files to work on, the replace will be global (throughout the workspace).
// `filter "document.txt"`           - document.txt file in the root folder
// `filter "Documents/document.txt"` - document.txt file in the Documents folder in the root folder
// `filter "**/document.txt"`        - document.txt files anywhere
// `filter "*.txt"`                  - any .txt file in the root folder
// `filter "**/*.txt"`               - any .txt file
// `filter "**/*.adl, **/*.ifc"`     - any .adl and any .ifc file

// filter "docs/terms/identity.md"
// filter "docs/**/*.md"
filter "docs/**/*.md"

// PREPROCESSING: convert single-%-notations into %%-notations.

// Convert quotes so that only two types remain: ' and "
replace-regex "[‘’]"
with "'"

// We might want to 'undo' %%...|...%% markers in case some 'show text' needs to be associated wiht another 'reftext'
// However, that wouldn't work e.g. for %%jurisdiction|party%% kind of constructs, so we don't do it
// replace-regex "(?<=\W)%%([^\|\n\r]+)\|[^%\n\r]+%%(?=\W)"
// with "%$1%"

// First, convert %show text% into %%show text%% in most of the cases... (it isn't fool proof!)
// Use test sets: use the replace-regex to find texts in this file. Matches should match, non-matches should not.
// Test set: NONE MAY MATCH: %verif%er, %verif"ier%, "%verifier%", `%verifier%`
// Test set: all must match: %my verifier%, ('%verifiers%'), %verifier's%, %verifier’s%, (%(ver)/ifier%):., %vfd|verifier data%
// Test set: all must match: my/%verifier%, %my verifier%/. %verifier%." %verifier%-.
// Test set: all must match: %risks%/%objectives%
// Test set: all must also match:  %(our) (vfyr)%, %verifier's%. %verifier’s%... %verifying%-%party%), '**subject (of a %party%)**'
replace-regex "(?<=(?:/|[-\s]\(?'?)%)([^%"]+)(?=%(([*_)-/:;,.'"!?]|\[[^\]]*\]){0,5}(\n|\s|/)|-%?\w))"
with "%$1%"

// We do not use this replacement any more because authors make too many mistakes when trying to use it.
// Only thereafter can we convert %showtext (words without trailing `%`-char) into %%showtext%%
// Test set: none may match: %verif%er, %(our) (verifier)%,
// Test set: all must match: %verifier %verifiers, '%verifier'), %verifier's, %verifier’s, %verifier:, (%verifiers), %verifier's..... %verifier’s,?.!?  its %principal.[^DC.4] Also a %party)'
// replace-regex "(?<=(?:\s\(?'?|/)%)((\w+((/|-|’|')\w)?)+)(?='?\)?[:;,.!?]*(\[[^\]]*\])?\s)"
// with "%$1%%"

// Then, we can expand %%show text%% into %%show text|show text%%
replace-regex "(?<=\W)%%([^\|\^]*?)%%(?=\W)"
with "%%$1|$1%%"

// Next, we convert the latter part into lowercase
replace-regex "(?<=\|)([^A-Z%]*?[A-Z].*?)(?=%%)"
with-case "lowercase"

// Next, we replace whitespace in `lowercase show text` instances with `-` characters
replace-regex "(?<=\|)([^%\|\n\r\s]+)\s+([^%]+)(?=%%)"
with "$1-$2"
replace-regex "(?<=\|)([^%\|\n\r\s]+)\s+([^%]+)(?=%%)"
with "$1-$2"
replace-regex "(?<=\|)([^%\|\n\r\s]+)\s+([^%]+)(?=%%)"
with "$1-$2"
replace-regex "(?<=\|)([^%\|\n\r\s]+)\s+([^%]+)(?=%%)"
with "$1-$2"
replace-regex "(?<=\|)([^%\|\n\r\s]+)\s+([^%]+)(?=%%)"
with "$1-$2"

// ACTUAL PROCESSING: now we need to convert well-known `lowercase-show-text`s to appropriate `reftexts`

// [A]
// For 'autonomous|autonomy', see 'self-sovereignty'
replace-regex "%{mid}(actor|agent|assertion|attribute|author)%{ss}%{end}"
with "$1"
replace-regex "%{mid}(action(-type)?|act(ing)?)%{ss}%{end}"
with "action"
replace-regex "%{mid}(activit)%{yies}%{end}"
with "action"
replace-regex "%{mid}(ssi-)?(ac%{ss}|assurance-communit%{yies})%{end}"
with "ssi-assurance-community"
replace-regex "%{mid}\(?(decentralized|centralized|)\)?authorit%{yies}?%{end}"
with "authority"

// [B]
// for 'business-transaction' see 'transaction'

// [C]
// for 'claim', see 'statement'
replace-regex "%{mid}(communit)%{yies}%{end}"
with "$1y"
replace-regex "%{mid}(colleague|concept(-file)?|credential(-type)?(-catalogue)?|commitment-decision)%{ss}?%{end}"
with "$1"
replace-regex "%{mid}(colleague)(?:-agent)?%{ss}?%{end}"
with "$1"
replace-regex "%{mid}communications?-(channel|session)%{ss}?%{end}"
with "communication-$1"

// [D]
replace-regex "%{mid}data-(collector|discloser)-polic%{yies}%{end}"
with "data-$1-policy"
replace-regex "%{mid}data-(collector|discloser)%{ss}?%{end}"
with "data-$1"

replace-regex "%{mid}(definition|dependent|dictionary(-file)?)%{ss}?%{end}"
with "$1"
replace-regex "%{mid}\(?(?:electronic|digital)\)?-(actor|agent|colleague|communication-channel)%{ss}%{end}"
with "digital-$1"
replace-regex "%{mid}\(?(?:electronic|digital)\)?-(polic)%{yies}%{end}"
with "digital-$1y"

replace-regex "%{mid}(%{dutyrighttype}|%{dutyright})%{end}"
with "pattern-duties-and-rights"

// [E]
replace-regex "%{mid}(ecosystem|employee|employer)%{ss}%{end}"
with "$1"
replace-regex "%{mid}(legal-)?entit%{yies}%{end}"
with "$1entity"

// [G]
replace-regex "%{mid}glossar%{yies}%{end}"
with "glossary"
replace-regex "%{mid}(glossary-file|guardian|governor)%{ss}%{end}"
with "$1"
replace-regex "%{mid}guardianship(-arrangement)?%{ss}%{end}"
with "guardianship-arrangement"
replace-regex "%{mid}guardianship(-arrangement)?-type%{ss}%{end}"
with "guardianship-type"
replace-regex "%{mid}(govern(or)?s?|governed(?:-by)?|government|governing(?:-part%{yies})?)%{end}"
with "governance"

// [H-I-J-K] (all holder, issuer, verifier and wallet stuff, too)
// for associated policies, see [P]
replace-regex "%{mid}(holder|issuer|verifier|validator|wallet|jurisdiction(-governor)?|knowledge(-governor)?)%{ss}%{end}"
with "$1"
replace-regex "%{mid}((holder|issuer|verifier|validation|wallet)-polic)%{yies}%{end}"
with "$1y"
replace-regex "%{mid}(people|person|human(-being)?)%{ss}%{end}"
with "human-being"
replace-regex "%{mid}identifier%{ss}%{end}"
with "identifier"
replace-regex "%{mid}identif(y|ying|iable|ied?|ication)%{ss}%{end}"
with "identify"
replace-regex "%{mid}((?:partial-)?identit)%{yies}%{end}"
with "$1y"

// [L-M]
replace-regex "%{mid}(legal-jurisdiction|legal-system)%{ss}%{end}"
with "$1"
// for 'legal entities', see 'entities'
replace-regex "%{mid}(manager?s?|managed(?:-by)?|management|managing(?:-part%{yies})?)%{end}"
with "management"

// [O]
replace-regex "%{mid}own(er)?%{ss}%{end}"
with "owner"
replace-regex "%{mid}owning%{end}"
with "ownership"
replace-regex "%{mid}(?:natural-)?(objective|organization|owned|ownership)%{ss}%{end}"
with "$1"

// [P]
// for 'people' see 'human'
replace-regex "%{mid}((?:part%{yies}|actor%{ss}|action%{ss}),?-){2,3}(pattern|(mental-|conceptual-)?model)%{ss}%{end}"
with "pattern-party-actor-action"
replace-regex "%{mid}(?!pattern)((?:[a-z]+-)*?[a-z]+)-(pattern|(mental-|conceptual-)?model)%{ss}%{end}"
with "pattern-$1"
replace-regex "%{mid}(pattern|mental-model|conceptual-model)%{ss}%{end}"
with "pattern"
replace-regex "%{mid}(participant|pattern-file|peer-(actor|agent)|presentation(-request)?|principal)%{ss}%{end}"
with "$1"
replace-regex "%{mid}(peer-)?part%{yies}%{end}"
with "$1party"
// The %%party|party%% is also an %%actor|actor%% (see that %%party-actor-action pattern|party-actor-action-pattern%% for details)
replace-regex "%{mid}([a-z][^%]*?)-pattern%{end}"
with "pattern-$1"
// For holder, issuer, verifier and wallet policies, see [H-I-J-K]
replace-regex "%{mid}(|transaction-data-(collector|discloser)-)polic%{yies}%{end}"
with "$1policy"

// [Q-R]
// For 'rights', see [D]uties
replace-regex "%{mid}(risk|role|role-name)%{ss}%{end}"
with "$1"
replace-regex "%{mid}(\(?networked-\)?|\(?(\(?de\)?)centralized-\)?)?risk-management%{end}"
with "risk-management"

// [S]
// For 'scoped term', see [T]erm
replace-regex "%{mid}(scope|scope-file|ssi-agent|subject)%{ss}%{end}"
with "$1"
replace-regex "%{mid}scopes-of-control%{end}"
with "scope-of-control"
replace-regex "%{mid}(assertion|statement|claim|statement%{ss}/claim)%{ss}%{end}"
with "assertion"
replace-regex "%{mid}(ssi|self-sovereign-identity-\(ssi\)|\(ssi\)-self-sovereign-identity|self-sovereign-identity)(-contexts?)?%{end}"
with "self-sovereign-identity"
replace-regex "%{mid}(self-sovereign|autonomous|autonomy)%{end}"
with "self-sovereignty"
replace-regex "%{mid}(ssi-ac)%{ss}%{end}"
with "ssi-assurance-community"
replace-regex "%{mid}(ssi-assurance-communit)%{yies}%{end}"
with "ssi-assurance-community"

// [T]
// for transaction data collector/discloers policies, see [P]
replace-regex "%{mid}(scoped-term|tag|term)%{ss}%{end}"
with "$1"
replace-regex "%{mid}(terminolog|terms?-communit)%{yies}%{end}"
with "$1y"
replace-regex "%{mid}(?:\(?business\)?-)?(term(-file)?|transaction(-agreement|-id|-data-(collector|discloser)|-form|-proposal|-request|-type)?)%{ss}%{end}"
with "$1"

// [V]
// for verifier and validator stuff - see holder
replace-regex "%{mid}(?:\(?verifiable\)?-)?(credential)%{ss}%{end}"
with "$1"
replace-regex "%{mid}(?:data-)?(?:valid|validat(ing|ion)|validate(d|s))%{end}"
with "validate"
replace-regex "%{mid}(?:data-)?(?:verif(y|ied|ies|ying|ication))%{end}"
with "verify"
replace-regex "%{mid}vocabular%{yies}%{end}"
with "vocabulary"

// [W]
// for wallet stuff - see holder
replace-regex "%{mid}(essif-?lab-)?world-model(-pattern)?%{end}"
with "pattern-world-model"

// CLEANING UP UNINTENDED CHANGES

// Replace %%Show text|ref-text%% with %%Show text^ref-text%% in glossaryText
// Note that using `^` e.g. in `^glossaryText` doesn't work in this script (while it does in VSCode search/replace)
// Also note that we need the separator `\|` to be in a group because otherwise, replacing won't work (perhaps that's a bug?)
replace-regex "(?<=glossaryText:)(\s*")([^\|"]+?)\|((?:-|\w)+%%)"
with "$1$2^$3"
replace-regex "(?<=glossaryText:)(\s*")([^\|"]+?)\|((?:-|\w)+%%)"
with "$1$2^$3"
replace-regex "(?<=glossaryText:)(\s*")([^\|"]+?)\|((?:-|\w)+%%)"
with "$1$2^$3"
replace-regex "(?<=glossaryText:)(\s*")([^\|"]+?)\|((?:-|\w)+%%)"
with "$1$2^$3"
replace-regex "(?<=glossaryText:)(\s*")([^\|"]+?)\|((?:-|\w)+%%)"
with "$1$2^$3"
replace-regex "(?<=glossaryText:)(\s*")([^\|"]+?)\|((?:-|\w)+%%)"
with "$1$2^$3"
replace-regex "(?<=glossaryText:)(\s*")([^\|"]+?)\|((?:-|\w)+%%)"
with "$1$2^$3"
replace-regex "(?<=glossaryText:)(\s*")([^\|"]+?)\|((?:-|\w)+%%)"
with "$1$2^$3"

// Remove all `%%showtext|reftext%%` occurrences in markdown headers
replace-regex "(^#+\s+.*?)%%([^\|]*)\|([^%]*)%%(.*$)"
with "$1$2$4"
replace-regex "(^#+\s+.*?)%%([^\|]*)\|([^%]*)%%(.*$)"
with "$1$2$4"

// Remove all `%%showtext|reftext%%` occurrences in `<img />`-constructs
replace-regex "(<img(?:(?:.|[\n])(?!/>))*?)%%([^\|]*)\|(?:[^%]*)%%"
with "$1$2"
replace-regex "(<img(?:(?:.|[\n])(?!/>))*?)%%([^\|]*)\|(?:[^%]*)%%"
with "$1$2"

// Remove all `%%showtext|reftext%%` occurrences in http(s)-references
replace-regex "(\]\(http[^\)]*?)%%([^\^\|]*).*?%%"
with "$1$2"
replace-regex "(\]\(http[^\)]*?)%%([^\^\|]*).*?%%"
with "$1$2"
